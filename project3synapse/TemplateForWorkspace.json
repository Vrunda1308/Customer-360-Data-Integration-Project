{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "project3synapse"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"project3synapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'project3synapse-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:project3synapse.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "bootcampserver.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "bootcampdatabase"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "adminvrunda"
		},
		"project3synapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://bootcampadls1.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Pl_scd2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "scd2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_scd2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"target": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T00:05:11Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_scd2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_bootproject3')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "DependentTable",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_dependent",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerServiceIntercations": {},
									"InStoreTranscations": {},
									"LoyaltyAccounts": {},
									"LoyaltyTranscations": {},
									"OnlineTranscation": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {},
									"sink5": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-24T05:39:12Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_dependent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_project3')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ParentTables",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_parent",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Agents": {},
									"Customers": {},
									"Products": {},
									"Stores": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-24T03:13:20Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_parent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_scd')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "scd",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_scd",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"Target": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-01T00:58:38Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_scd')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/project3synapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('project3synapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/project3synapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('project3synapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_dependent')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CustomerServiceIntercations"
						},
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "InStoreTranscations"
						},
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "LoyaltyAccounts"
						},
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "LoyaltyTranscations"
						},
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "OnlineTranscation"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink3"
						},
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink4"
						},
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink5"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "alterRow3"
						},
						{
							"name": "filter4"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "alterRow4"
						},
						{
							"name": "filter5"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "alterRow5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          InteractionID as short,",
						"          CustomerID as short,",
						"          DateTime as timestamp,",
						"          AgentID as short,",
						"          IssueType as string,",
						"          ResolutionStatus as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'project3',",
						"     folderPath: 'bronze',",
						"     fileName: 'CustomerServiceInteractions.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> CustomerServiceIntercations",
						"source(output(",
						"          TransactionID as short,",
						"          CustomerID as short,",
						"          StoreID as short,",
						"          DateTime as timestamp,",
						"          Amount as double,",
						"          PaymentMethod as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'project3',",
						"     folderPath: 'bronze',",
						"     fileName: 'InStoreTransactions.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> InStoreTranscations",
						"source(output(",
						"          LoyaltyID as short,",
						"          CustomerID as short,",
						"          PointsEarned as short,",
						"          TierLevel as string,",
						"          JoinDate as date",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'project3',",
						"     folderPath: 'bronze',",
						"     fileName: 'LoyaltyAccounts.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> LoyaltyAccounts",
						"source(output(",
						"          LoyaltyID as short,",
						"          DateTime as timestamp,",
						"          PointsChange as short,",
						"          Reason as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'project3',",
						"     folderPath: 'bronze',",
						"     fileName: 'LoyaltyTransactions.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> LoyaltyTranscations",
						"source(output(",
						"          OrderID as short,",
						"          CustomerID as short,",
						"          ProductID as short,",
						"          DateTime as timestamp,",
						"          PaymentMethod as string,",
						"          Amount as double,",
						"          Status as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'project3',",
						"     folderPath: 'bronze',",
						"     fileName: 'OnlineTransactions.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> OnlineTranscation",
						"CustomerServiceIntercations filter(!isNull('CustomerID')) ~> filter1",
						"filter1 aggregate(groupBy(CustomerID),",
						"     each(match(name!='CustomerID'), $$ = first($$))) ~> aggregate1",
						"aggregate1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"InStoreTranscations filter(!isNull('TranscationID')) ~> filter2",
						"filter2 aggregate(groupBy(TransactionID),",
						"     each(match(name!='TransactionID'), $$ = first($$))) ~> aggregate2",
						"aggregate2 alterRow(upsertIf(1==1)) ~> alterRow2",
						"LoyaltyAccounts filter(!isNull('LoyaltyID')) ~> filter3",
						"filter3 aggregate(groupBy(LoyaltyID),",
						"     each(match(name!='LoyaltyID'), $$ = first($$))) ~> aggregate3",
						"aggregate3 alterRow(upsertIf(1==1)) ~> alterRow3",
						"LoyaltyTranscations filter(!isNull(LoyaltyID)) ~> filter4",
						"filter4 aggregate(groupBy(LoyaltyID),",
						"     each(match(name!='LoyaltyID'), $$ = first($$))) ~> aggregate4",
						"aggregate4 alterRow(upsertIf(1==1)) ~> alterRow4",
						"OnlineTranscation filter(!isNull(OrderID)) ~> filter5",
						"filter5 aggregate(groupBy(OrderID),",
						"     each(match(name!='OrderID'), $$ = first($$))) ~> aggregate5",
						"aggregate5 alterRow(upsertIf(1==1)) ~> alterRow5",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'project3',",
						"     folderPath: 'sliver/CustomerServiceInteractions',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['CustomerID'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'project3',",
						"     folderPath: 'sliver/InStoreTranactions',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['TransactionID'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2",
						"alterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'project3',",
						"     folderPath: 'sliver/LoyaltyAccounts',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['LoyaltyID'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          LoyaltyID,",
						"          CustomerID,",
						"          PointsEarned,",
						"          TierLevel,",
						"          JoinDate",
						"     )) ~> sink3",
						"alterRow4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'project3',",
						"     folderPath: 'sliver/LoyaltyTranscations',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['LoyaltyID'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          LoyaltyID,",
						"          DateTime,",
						"          PointsChange,",
						"          Reason",
						"     )) ~> sink4",
						"alterRow5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'project3',",
						"     folderPath: 'sliver/OnlineTranscations',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['OrderID'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          OrderID,",
						"          CustomerID,",
						"          ProductID,",
						"          DateTime,",
						"          PaymentMethod,",
						"          Amount,",
						"          Status",
						"     )) ~> sink5"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/project3synapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_parent')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Agents"
						},
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Customers"
						},
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Products"
						},
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Stores"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink3"
						},
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "alterRow3"
						},
						{
							"name": "filter4"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "alterRow4"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AgentID as short,",
						"          Name as string,",
						"          Department as string,",
						"          Shift as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'project3',",
						"     folderPath: 'bronze',",
						"     fileName: 'Agents.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> Agents",
						"source(output(",
						"          CustomerID as short,",
						"          Name as string,",
						"          Email as string,",
						"          Address as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'project3',",
						"     folderPath: 'bronze',",
						"     fileName: 'Customers.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> Customers",
						"source(output(",
						"          ProductID as short,",
						"          Name as string,",
						"          Category as string,",
						"          Price as double",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'project3',",
						"     folderPath: 'bronze',",
						"     fileName: 'Products.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> Products",
						"source(output(",
						"          StoreID as short,",
						"          Location as string,",
						"          Manager as string,",
						"          OpenHours as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'project3',",
						"     folderPath: 'bronze',",
						"     fileName: 'Stores.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> Stores",
						"Agents filter(!isNull(AgentID)) ~> filter1",
						"filter1 aggregate(groupBy(AgentID),",
						"     each(match(name!='AgentID'), $$ = first($$))) ~> aggregate1",
						"aggregate1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"Customers filter(!isNull(CustomerID)) ~> filter2",
						"filter2 aggregate(groupBy(CustomerID),",
						"     each(match(name!='CustomerID'), $$ = first($$))) ~> aggregate2",
						"aggregate2 alterRow(upsertIf(1==1)) ~> alterRow2",
						"Products filter(!isNull(ProductID)) ~> filter3",
						"filter3 aggregate(groupBy(ProductID),",
						"     each(match(name!='ProductID'), $$ = first($$))) ~> aggregate3",
						"aggregate3 alterRow(upsertIf(1==1)) ~> alterRow3",
						"Stores filter(!isNull('StoreID')) ~> filter4",
						"filter4 aggregate(groupBy(StoreID),",
						"     each(match(name!='StoreID'), $$ = first($$))) ~> aggregate4",
						"aggregate4 alterRow(upsertIf(1==1)) ~> alterRow4",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'project3',",
						"     folderPath: 'sliver/Agents',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['AgentID'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'project3',",
						"     folderPath: 'sliver/Customers',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['CustomerID'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2",
						"alterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'project3',",
						"     folderPath: 'sliver/Products',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ProductID'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink3",
						"alterRow4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'project3',",
						"     folderPath: 'sliver/Stores',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['StoreID'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink4"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/project3synapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_scd')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "Target"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "RenameColumns"
						},
						{
							"name": "GenerateHashKey"
						},
						{
							"name": "JoinTables"
						},
						{
							"name": "split1"
						},
						{
							"name": "UpdateAudit"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "union1"
						},
						{
							"name": "InsertAudit"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as short,",
						"          Name as string,",
						"          Email as string,",
						"          Address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'project3',",
						"     folderPath: 'sliver/Customers') ~> source",
						"source(output(",
						"          TGT_ID as integer,",
						"          TGT_HASHKEY as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'Select CUSTOMERID as TGT_ID, HASHKEY as TGT_HASHKEY from CUSTOMERS_SCD WHERE\\nISACTIVE = 1\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> Target",
						"source select(mapColumn(",
						"          each(match(1==1),",
						"               concat('Src_',$$) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumns",
						"RenameColumns derive(Src_Hashkey = crc32(concat(     toString(Src_CustomerID),     toString(Src_Name),     toString(Src_Email),     toString(Src_Address) ))) ~> GenerateHashKey",
						"GenerateHashKey, Target join(Src_CustomerID == TGT_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTables",
						"JoinTables split(isNull(TGT_ID),",
						"     Src_CustomerID==TGT_ID && Src_Hashkey!=TGT_HASHKEY,",
						"     disjoint: false) ~> split1@(Insert, Update)",
						"split1@Update derive(Updateddate = currentTimestamp(),",
						"          Updatedby = 'dataflow-updated',",
						"          isActive = 0) ~> UpdateAudit",
						"UpdateAudit alterRow(upsertIf(1==1)) ~> alterRow1",
						"split1@Insert, split1@Update union(byName: true)~> union1",
						"union1 derive(Createddate = currentTimestamp(),",
						"          Createdby = 'dataflow',",
						"          Updateddate = currentTimestamp(),",
						"          Updatedby = 'dataflow-updated',",
						"          isActive = 1) ~> InsertAudit",
						"InsertAudit alterRow(upsertIf(1==1)) ~> alterRow2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMERID as integer,",
						"          NAME as string,",
						"          EMAIL as string,",
						"          ADDRESS as string,",
						"          CREATEDDATE as timestamp,",
						"          CREATEDBY as string,",
						"          UPDATEDDATE as timestamp,",
						"          UPDATEDBY as string,",
						"          HASHKEY as long,",
						"          ISACTIVE as boolean",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'CUSTOMERS_SCD',",
						"     insertable: false,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: true,",
						"     keys:['CUSTOMERID'],",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CUSTOMERID = Src_CustomerID,",
						"          NAME = Src_Name,",
						"          EMAIL = Src_Email,",
						"          ADDRESS = Src_Address,",
						"          UPDATEDDATE = Updateddate,",
						"          UPDATEDBY = Updatedby,",
						"          HASHKEY = Src_Hashkey,",
						"          ISACTIVE = isActive",
						"     )) ~> sink1",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMERID as integer,",
						"          NAME as string,",
						"          EMAIL as string,",
						"          ADDRESS as string,",
						"          CREATEDDATE as timestamp,",
						"          CREATEDBY as string,",
						"          UPDATEDDATE as timestamp,",
						"          UPDATEDBY as string,",
						"          HASHKEY as long,",
						"          ISACTIVE as boolean",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'CUSTOMERS_SCD',",
						"     insertable: false,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: true,",
						"     keys:['CUSTOMERID','HASHKEY'],",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CUSTOMERID = Src_CustomerID,",
						"          NAME = Src_Name,",
						"          EMAIL = Src_Email,",
						"          ADDRESS = Src_Address,",
						"          CREATEDDATE = Createddate,",
						"          CREATEDBY = Createdby,",
						"          UPDATEDDATE = Updateddate,",
						"          UPDATEDBY = Updatedby,",
						"          HASHKEY = Src_Hashkey,",
						"          ISACTIVE = isActive",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/project3synapse-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_scd2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "project3synapse-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "target"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Rename"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "join"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "union1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LoyaltyID as short,",
						"          DateTime as timestamp,",
						"          PointsChange as short,",
						"          Reason as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'project3',",
						"     folderPath: 'sliver/LoyaltyTranscations') ~> source",
						"source(output(",
						"          tgt_id as integer,",
						"          tgt_Hashkey as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select LoyaltyID as tgt_id,Hashkey as tgt_Hashkey from Loyalty_scd\\nwhere Isactive = 1',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> target",
						"source select(mapColumn(",
						"          each(match(1==1),",
						"               concat('Src_',$$) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Rename",
						"Rename derive(Src_Hashkey = crc32(concat(toString(Src_LoyaltyID),toString(Src_PointsChange),Src_Reason,toString(Src_DateTime)))) ~> derivedColumn1",
						"derivedColumn1, target join(Src_LoyaltyID == tgt_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join",
						"join split(isNull(tgt_id),",
						"     Src_LoyaltyID == tgt_id && Src_Hashkey != tgt_Hashkey,",
						"     disjoint: false) ~> split1@(Insert, Update)",
						"split1@Update derive(Updateddate = currentTimestamp(),",
						"          Updatedby = 'dataflow-updated',",
						"          isActive = 0) ~> derivedColumn2",
						"derivedColumn2 alterRow(upsertIf(1==1)) ~> alterRow1",
						"split1@Insert, split1@Update union(byName: true)~> union1",
						"union1 derive(Createddate = currentTimestamp(),",
						"          Createdby = 'dataflow',",
						"          Updateddate = currentTimestamp(),",
						"          Updatedby = 'dataflow-updated',",
						"          isActive = 1) ~> derivedColumn3",
						"derivedColumn3 alterRow(upsertIf(1==1)) ~> alterRow2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LoyaltyID as integer,",
						"          Datetime as timestamp,",
						"          PointsChange as integer,",
						"          Reason as string,",
						"          CreatedDate as timestamp,",
						"          UpdateDate as timestamp,",
						"          CreatedBy as string,",
						"          UpdatedBy as string,",
						"          Hashkey as long,",
						"          Isactive as integer",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Loyalty_scd',",
						"     insertable: false,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: true,",
						"     keys:['LoyaltyID'],",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          LoyaltyID = Src_LoyaltyID,",
						"          Datetime = Src_DateTime,",
						"          PointsChange = Src_PointsChange,",
						"          Reason = Src_Reason,",
						"          UpdateDate = Updateddate,",
						"          UpdatedBy = Updatedby,",
						"          Hashkey = Src_Hashkey,",
						"          Isactive = isActive",
						"     )) ~> sink1",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LoyaltyID as integer,",
						"          Datetime as timestamp,",
						"          PointsChange as integer,",
						"          Reason as string,",
						"          CreatedDate as timestamp,",
						"          UpdateDate as timestamp,",
						"          CreatedBy as string,",
						"          UpdatedBy as string,",
						"          Hashkey as long,",
						"          Isactive as integer",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Loyalty_scd',",
						"     insertable: false,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: true,",
						"     keys:['LoyaltyID'],",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          LoyaltyID = Src_LoyaltyID,",
						"          Datetime = Src_DateTime,",
						"          PointsChange = Src_PointsChange,",
						"          Reason = Src_Reason,",
						"          CreatedDate = Createddate,",
						"          UpdateDate = Updateddate,",
						"          CreatedBy = Createdby,",
						"          UpdatedBy = Updatedby,",
						"          Hashkey = Src_Hashkey,",
						"          Isactive = isActive",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/project3synapse-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://bootcampadls1.dfs.core.windows.net/project3/sliver/Customers/',\n        FORMAT = 'DELTA'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseDeltaFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseDeltaFormat] \n\tWITH ( FORMAT_TYPE = Delta)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'project3_bootcampadls1_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [project3_bootcampadls1_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://project3@bootcampadls1.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE dbo.customers1 (\n\t[CustomerID] smallint,\n\t[Name] nvarchar(4000),\n\t[Email] nvarchar(4000),\n\t[Address] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'sliver/Customers/',\n\tDATA_SOURCE = [project3_bootcampadls1_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDeltaFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.customers1\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "project3",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://bootcampadls1.dfs.core.windows.net/project3/sliver/LoyaltyTranscations/',\n        FORMAT = 'DELTA'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseDeltaFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseDeltaFormat] \n\tWITH ( FORMAT_TYPE = Delta)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'project3_bootcampadls1_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [project3_bootcampadls1_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://project3@bootcampadls1.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE dbo.loyalty (\n\t[LoyaltyID] smallint,\n\t[DateTime] datetime2(7),\n\t[PointsChange] smallint,\n\t[Reason] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'sliver/LoyaltyTranscations/',\n\tDATA_SOURCE = [project3_bootcampadls1_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDeltaFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.loyalty\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "project3",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}